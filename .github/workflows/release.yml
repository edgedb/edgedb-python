name: Release

on:
  pull_request:
    branches:
      - release
    paths:
      - 'edgedb/_version.py'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: edgedb/action-validate-release-pr@master
      id: checkver
      with:
        version-file: edgedb/_version.py

    - env:
        VERSION: ${{ steps.checkver.outputs.version }}
      run: |
        mkdir -p dist/
        echo "${VERSION}" > dist/VERSION

    - uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: dist/

  build:
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7]
        os: [ubuntu-16.04, macos-10.14, windows-latest]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 50
        submodules: true

    - name: Install EdgeDB
      if: "!startsWith(matrix.os, 'windows')"
      env:
        OS_NAME: ${{ matrix.os }}
        SLOT: 1-alpha2
      run: |
        .github/workflows/install-edgedb.sh

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python Deps
      run: |
        python -m pip install --upgrade setuptools pip wheel

    - name: Build Wheels (linux)
      if: startsWith(matrix.os, 'ubuntu')
      uses: docker://quay.io/pypa/manylinux1_x86_64
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      with:
        entrypoint: /github/workspace/.github/workflows/build-manylinux-wheels.sh

    - name: Build Wheels (non-linux)
      if: "!startsWith(matrix.os, 'ubuntu')"
      run: |
        make clean
        python setup.py bdist_wheel

    - name: Test Wheels
      if: "!startsWith(matrix.os, 'windows')"
      run: |
        pip install --pre edgedb[test] -f "file:///${GITHUB_WORKSPACE}/dist"
        make -C "${GITHUB_WORKSPACE}" testinstalled

    - uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: wheels
        path: dist/

    - name: Extract Release Version
      id: relver
      run: |
        set -e
        echo ::set-output name=version::$(cat dist/VERSION)

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Tag and Publish Github Release
      uses: elprans/gh-action-create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.relver.outputs.version }}
        release_name: v${{ steps.relver.outputs.version }}
        body: ${{ github.event.pull_request.body }}
        draft: true
