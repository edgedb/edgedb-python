# AUTOGENERATED FROM 'select_optional_json.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import typing
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SelectOptionalJsonResultItem(NoPydanticValidation):
    id: uuid.UUID
    snake_case: typing.Optional[SelectOptionalJsonResultItemSnakeCase]


@dataclasses.dataclass
class SelectOptionalJsonResultItemSnakeCase(NoPydanticValidation):
    id: uuid.UUID


async def select_optional_json(
    executor: edgedb.AsyncIOExecutor,
    arg0: typing.Optional[str],
) -> typing.List[typing.Tuple[str, SelectOptionalJsonResultItem]]:
    return await executor.query(
        """\
        create type TestCase {
            create link snake_case -> TestCase;
        };

        select (<optional json>$0, TestCase {snake_case});\
        """,
        arg0,
    )
