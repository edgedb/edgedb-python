# AUTOGENERATED FROM 'parpkg/subpkg/my_query.edgeql' WITH:
#     $ edgedb-py --target blocking --no-skip-pydantic-validation


from __future__ import annotations
import array
import dataclasses
import datetime
import edgedb
import enum
import typing
import uuid


MyScalar = int


class MyEnum(enum.Enum):
    THIS = "This"
    THAT = "That"
    E_1 = "1"
    F_B = "f. b"
    F_B_1 = "f-b"


@dataclasses.dataclass
class MyQueryResult:
    a: uuid.UUID
    b: typing.Optional[uuid.UUID]
    c: str
    d: typing.Optional[str]
    e: bytes
    f: typing.Optional[bytes]
    g: int
    h: typing.Optional[int]
    i: int
    j: typing.Optional[int]
    k: int
    l: typing.Optional[int]
    m: float
    n: typing.Optional[float]
    o: float
    p: typing.Optional[float]
    q: bool
    r: typing.Optional[bool]
    s: datetime.datetime
    t: typing.Optional[datetime.datetime]
    u: datetime.datetime
    v: typing.Optional[datetime.datetime]
    w: datetime.date
    x: typing.Optional[datetime.date]
    y: datetime.time
    z: typing.Optional[datetime.time]
    aa: datetime.timedelta
    ab: typing.Optional[datetime.timedelta]
    ac: int
    ad: typing.Optional[int]
    ae: edgedb.RelativeDuration
    af: typing.Optional[edgedb.RelativeDuration]
    ag: edgedb.DateDuration
    ah: typing.Optional[edgedb.DateDuration]
    ai: edgedb.ConfigMemory
    aj: typing.Optional[edgedb.ConfigMemory]
    ak: edgedb.Range[int]
    al: typing.Optional[edgedb.Range[int]]
    am: edgedb.Range[int]
    an: typing.Optional[edgedb.Range[int]]
    ao: edgedb.Range[float]
    ap: typing.Optional[edgedb.Range[float]]
    aq: edgedb.Range[float]
    ar: typing.Optional[edgedb.Range[float]]
    as_: edgedb.Range[datetime.datetime]
    at: typing.Optional[edgedb.Range[datetime.datetime]]
    au: edgedb.Range[datetime.datetime]
    av: typing.Optional[edgedb.Range[datetime.datetime]]
    aw: edgedb.Range[datetime.date]
    ax: typing.Optional[edgedb.Range[datetime.date]]
    ay: MyScalar
    az: typing.Optional[MyScalar]
    ba: MyEnum
    bb: typing.Optional[MyEnum]
    bc: array.array
    bd: typing.Optional[array.array]


def my_query(
    executor: edgedb.Executor,
    *,
    a: uuid.UUID,
    b: typing.Optional[uuid.UUID] = None,
    c: str,
    d: typing.Optional[str] = None,
    e: bytes,
    f: typing.Optional[bytes] = None,
    g: int,
    h: typing.Optional[int] = None,
    i: int,
    j: typing.Optional[int] = None,
    k: int,
    l: typing.Optional[int] = None,
    m: float,
    n: typing.Optional[float] = None,
    o: float,
    p: typing.Optional[float] = None,
    q: bool,
    r: typing.Optional[bool] = None,
    s: datetime.datetime,
    t: typing.Optional[datetime.datetime] = None,
    u: datetime.datetime,
    v: typing.Optional[datetime.datetime] = None,
    w: datetime.date,
    x: typing.Optional[datetime.date] = None,
    y: datetime.time,
    z: typing.Optional[datetime.time] = None,
    aa: datetime.timedelta,
    ab: typing.Optional[datetime.timedelta] = None,
    ac: int,
    ad: typing.Optional[int] = None,
    ae: edgedb.RelativeDuration,
    af: typing.Optional[edgedb.RelativeDuration] = None,
    ag: edgedb.DateDuration,
    ah: typing.Optional[edgedb.DateDuration] = None,
    ai: edgedb.ConfigMemory,
    aj: typing.Optional[edgedb.ConfigMemory] = None,
    ak: edgedb.Range[int],
    al: typing.Optional[edgedb.Range[int]] = None,
    am: edgedb.Range[int],
    an: typing.Optional[edgedb.Range[int]] = None,
    ao: edgedb.Range[float],
    ap: typing.Optional[edgedb.Range[float]] = None,
    aq: edgedb.Range[float],
    ar: typing.Optional[edgedb.Range[float]] = None,
    as_: edgedb.Range[datetime.datetime],
    at: typing.Optional[edgedb.Range[datetime.datetime]] = None,
    au: edgedb.Range[datetime.datetime],
    av: typing.Optional[edgedb.Range[datetime.datetime]] = None,
    aw: edgedb.Range[datetime.date],
    ax: typing.Optional[edgedb.Range[datetime.date]] = None,
    bc: typing.Sequence[float],
    bd: typing.Optional[typing.Sequence[float]] = None,
) -> MyQueryResult:
    return executor.query_single(
        """\
        create scalar type MyScalar extending int64;
        create scalar type MyEnum extending enum<'This', 'That', '1', 'f. b', 'f-b'>;

        select {
        	a := <uuid>$a,
        	b := <optional uuid>$b,
        	c := <str>$c,
        	d := <optional str>$d,
        	e := <bytes>$e,
        	f := <optional bytes>$f,
        	g := <int16>$g,
        	h := <optional int16>$h,
        	i := <int32>$i,
        	j := <optional int32>$j,
        	k := <int64>$k,
        	l := <optional int64>$l,
        	m := <float32>$m,
        	n := <optional float32>$n,
        	o := <float64>$o,
        	p := <optional float64>$p,
        	q := <bool>$q,
        	r := <optional bool>$r,
        	s := <datetime>$s,
        	t := <optional datetime>$t,
        	u := <cal::local_datetime>$u,
        	v := <optional cal::local_datetime>$v,
        	w := <cal::local_date>$w,
        	x := <optional cal::local_date>$x,
        	y := <cal::local_time>$y,
        	z := <optional cal::local_time>$z,
        	aa := <duration>$aa,
        	ab := <optional duration>$ab,
        	ac := <bigint>$ac,
        	ad := <optional bigint>$ad,
        	ae := <cal::relative_duration>$ae,
        	af := <optional cal::relative_duration>$af,
        	ag := <cal::date_duration>$ag,
        	ah := <optional cal::date_duration>$ah,
        	ai := <cfg::memory>$ai,
        	aj := <optional cfg::memory>$aj,
        	ak := <range<int32>>$ak,
        	al := <optional range<int32>>$al,
        	am := <range<int64>>$am,
        	an := <optional range<int64>>$an,
        	ao := <range<float32>>$ao,
        	ap := <optional range<float32>>$ap,
        	aq := <range<float64>>$aq,
        	ar := <optional range<float64>>$ar,
        	as_ := <range<datetime>>$as_,
        	at := <optional range<datetime>>$at,
        	au := <range<cal::local_datetime>>$au,
        	av := <optional range<cal::local_datetime>>$av,
        	aw := <range<cal::local_date>>$aw,
        	ax := <optional range<cal::local_date>>$ax,
        	ay := <MyScalar>1,
        	az := <optional MyScalar>{},
        	ba := MyEnum.This,
        	bb := <optional MyEnum>{},
        	bc := <ext::pgvector::vector>$bc,
        	bd := <optional ext::pgvector::vector>$bd,
        }\
        """,
        a=a,
        b=b,
        c=c,
        d=d,
        e=e,
        f=f,
        g=g,
        h=h,
        i=i,
        j=j,
        k=k,
        l=l,
        m=m,
        n=n,
        o=o,
        p=p,
        q=q,
        r=r,
        s=s,
        t=t,
        u=u,
        v=v,
        w=w,
        x=x,
        y=y,
        z=z,
        aa=aa,
        ab=ab,
        ac=ac,
        ad=ad,
        ae=ae,
        af=af,
        ag=ag,
        ah=ah,
        ai=ai,
        aj=aj,
        ak=ak,
        al=al,
        am=am,
        an=an,
        ao=ao,
        ap=ap,
        aq=aq,
        ar=ar,
        as_=as_,
        at=at,
        au=au,
        av=av,
        aw=aw,
        ax=ax,
        bc=bc,
        bd=bd,
    )
