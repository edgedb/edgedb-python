# AUTOGENERATED FROM 'object/select_object.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import typing
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SelectObjectResult(NoPydanticValidation):
    id: uuid.UUID
    Name: str
    Language: str
    Params: typing.List[SelectObjectResultParamsItem]


@dataclasses.dataclass
class SelectObjectResultParamsItem(NoPydanticValidation):
    id: uuid.UUID
    Name: str
    Default: typing.Optional[str]


async def select_object(
    executor: gel.AsyncIOExecutor,
) -> typing.Optional[SelectObjectResult]:
    return await executor.query_single(
        """\
        select schema::Function {
          Name := .name,
          Language := .language,
          Params := .params {
            Name := .name,
            Default := .default,
          }
        }
        limit 1;\
        """,
    )
